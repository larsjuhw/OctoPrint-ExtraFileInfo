<h3>ExtraFileInfo Settings</h3>
<span>Configure the slicer settings you want to show under the <div class="btn btn-mini"><i
                class="fas fa-chevron-down"></i></div> section of files.</span>
    <div class="control-group">
        <label class="control-label" for="settings-setuptype">Setup Type</label>
        <select data-bind="value: settingsViewModel.settings.plugins.extrafileinfo.setup_type" id="settings-setuptype">
            <option>Simple</option>
            <option>Custom Jinja2 Template</option>
        </select>
    </div>

<div data-bind="visible: settingsViewModel.settings.plugins.extrafileinfo.setup_type() == 'Simple'" class="row-fluid">
            <br>The settings will be added as <code>{Setting}: {val}{Unit}</code></label>
    <div class="alert alert-info">The "Setting" boxes need to be filled with the exact "key" value from
        SlicerSettingsParser.<br><a href="https://github.com/larsjuhw/OctoPrint-ExtraFileInfo#Configuration">Read this explanation on GitHub for more info.</a></div>
    <div class="alert alert-error" id="ufp_installed_warning"><button type="button" class="close"
            data-dismiss="alert">&times;</button><strong>Warning!</strong> The plugin
        Cura Thumbnails seems to be installed. This plugin is known to conflict with
        SlicerSettingsParser on file upload. Use <a
            href="https://plugins.octoprint.org/plugins/prusaslicerthumbnails/#cura">Slicer
            Thumbnails</a> instead to solve this.</div>

    <div class='row-fluid'><a class='btn btn-mini icon-plus' data-bind='click: addParserRow'></a></div>
    <div class='row-fluid'>
        <table class='table table-striped table-condensed'>
            <thead>
                <tr>
                    <th style="width:30%;">Key</th>
                    <th style="width:30%;">Label</th>
                    <th style="width:15%;">Unit</th>
                    <th style="width:20%;">Show in</th>
                    <th style="width:5%;"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: settingsViewModel.settings.plugins.extrafileinfo.config">
                <tr>
                    <td><input type="text" style="width: 90%;" placeholder="Key" data-bind="value: key"></td>
                    <td><input type="text" style="width: 90%;" placeholder="Label" data-bind="value: label"></td>
                    <td><input type="text" style="width: 80%;" placeholder="Unit" data-bind="value: unit"></td>
                    <td>
                        <label class='checkbox'>
                            <input type="checkbox" data-bind="checked: showInFilesList">File info
                        </label>
                        <label class='checkbox'>
                            <input type="checkbox" data-bind="checked: showInStatesContainer">Active print info
                        </label>
                    </td>
                    <td><a class="btn btn-mini icon-trash" data-bind="click: $root.removeParserRow"></a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <h4>Filter Settings</h4>
    <span class="help-block">{{ _('Any characters entered in the filter field will be filtered from the displayed setting
        values. Can be useful for cases where some of the values in your gcode contain quotation marks such as:') }}</span>
    <div class="well well-small">; filament_settings_id = "Prusament ASA"</div>
    <div class="form-horizontal">
        <div class="control-group">
            <label class="control-label">{{ _('Enable Filter') }}</label>
            <div class="controls">
                <input type="checkbox" data-bind="checked: settingsViewModel.settings.plugins.extrafileinfo.filterEnabled">
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Filtered Characters') }}</label>
            <div class="controls">
                <input type="text" class="input-medium" data-bind="value: settingsViewModel.settings.plugins.extrafileinfo.filter">
            </div>
        </div>
    </div>
</div>
<div data-bind="visible: settingsViewModel.settings.plugins.extrafileinfo.setup_type() == 'Custom Jinja2 Template'">
    <p>The Jinja template below will be rendered with the following variables:</p>
    <ul>
        <li>All slicer settings will be available in the dictionary <code>st</code>.</li>
        <li>The variable <code>_location_</code> will be <code>'file'</code> and <code>'print'</code>
        when the template is rendered for the file and print views, respectively. This allows you to make the file
        and print views different as such: <br>
        <code>{% raw %}{% if _location_ == 'print' %}&lt;strong&gt;{{ layer_height }}&lt;/strong&gt;{% endif %}{% endraw %}</code></li>
    </ul>
    <p>For an example template, check out the template for the simple setup type <a href="https://github.com/larsjuhw/OctoPrint-ExtraFileInfo/blob/master/octoprint_extrafileinfo/templates/extrafileinfo_additionalInfo.jinja2">on GitHub.</a></p>
    <div class="alert alert-block">
      <h4>Warning!</h4>
      Do not blindly copy someone's template from the internet. Although the slicer setting values are sanitized, the template
      is not so that more freedom is possible. The template can therefore contain arbitrary JavaScript code. 
    </div>
    <label class="control-label" for="settings-custom-template"><strong>Custom Jinja2 Template</strong></label>
    <div id="extrafileinfo-editor"></div>
</div>

<div class="form-horizontal">
    <div class="control-group">
        <label class="checkbox" for="extrafileinfo-checkbox-defaultdict">
            <input type="checkbox" id="extrafileinfo-checkbox-defaultdict" data-bind="checked: settingsViewModel.settings.plugins.extrafileinfo.enable_defaultdict">
            <strong>Fill in missing setting values with "N/A"</strong>
        </label>
    </div>
</div>

<div class="row-fluid">
    <div class="span4" id="extrafileinfo-force-render">
        <button class="btn btn-primary" data-bind="click: forceRender, enable:!rendering_info()">
            <i class="fa fa-spinner fa-spin" data-bind="visible: rendering_info" style="display: none;"></i>
            Force Render All Files
        </button>
    </div>
    <div class="span7">
        <div class="alert alert-info" data-bind="visible: rendering_info">
            <strong>Rendering all file info...</strong><br>
            This should normally not take long. Check the logs for errors if it does.
        </div>
        <div class="alert alert-success" data-bind="visible: rendering_done">
            <button type="button" class="close" data-bind="click: function(data){rendering_done(false)}"
                aria-hidden="true">&times;</button>
            <strong>Done!</strong> You may not see the changes until you reload the file list or the page.
        </div>
        <div class="alert alert-error" data-bind="visible: !show_error_alert">
            <button type="button" class="close" data-bind="click: function(data){show_error_alert(false)}"
                aria-hidden="true">&times;</button>
            <strong>Error!</strong> Check the logs for more information. <a href="https://github.com/larsjuhw/OctoPrint-ExtraFileInfo/issues/new/choose">Create an issue</a> on GitHub if you need help.
        </div>
    </div>
</div>